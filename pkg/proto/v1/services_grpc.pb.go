// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/v1/services.proto

package proto_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SynchronizationServiceClient is the client API for SynchronizationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SynchronizationServiceClient interface {
	StartSynchronization(ctx context.Context, in *StartSynchronizationRequest, opts ...grpc.CallOption) (*StartSynchronizationResponse, error)
	FinishSynchronization(ctx context.Context, in *FinishSynchronizationRequest, opts ...grpc.CallOption) (*FinishSynchronizationResponse, error)
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (SynchronizationService_UploadFileClient, error)
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (SynchronizationService_DownloadFileClient, error)
}

type synchronizationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSynchronizationServiceClient(cc grpc.ClientConnInterface) SynchronizationServiceClient {
	return &synchronizationServiceClient{cc}
}

func (c *synchronizationServiceClient) StartSynchronization(ctx context.Context, in *StartSynchronizationRequest, opts ...grpc.CallOption) (*StartSynchronizationResponse, error) {
	out := new(StartSynchronizationResponse)
	err := c.cc.Invoke(ctx, "/proto.v1.SynchronizationService/StartSynchronization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synchronizationServiceClient) FinishSynchronization(ctx context.Context, in *FinishSynchronizationRequest, opts ...grpc.CallOption) (*FinishSynchronizationResponse, error) {
	out := new(FinishSynchronizationResponse)
	err := c.cc.Invoke(ctx, "/proto.v1.SynchronizationService/FinishSynchronization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synchronizationServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (SynchronizationService_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &SynchronizationService_ServiceDesc.Streams[0], "/proto.v1.SynchronizationService/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &synchronizationServiceUploadFileClient{stream}
	return x, nil
}

type SynchronizationService_UploadFileClient interface {
	Send(*UploadFileRequest) error
	CloseAndRecv() (*UploadFileResponse, error)
	grpc.ClientStream
}

type synchronizationServiceUploadFileClient struct {
	grpc.ClientStream
}

func (x *synchronizationServiceUploadFileClient) Send(m *UploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *synchronizationServiceUploadFileClient) CloseAndRecv() (*UploadFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *synchronizationServiceClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (SynchronizationService_DownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &SynchronizationService_ServiceDesc.Streams[1], "/proto.v1.SynchronizationService/DownloadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &synchronizationServiceDownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SynchronizationService_DownloadFileClient interface {
	Recv() (*DownloadFileResponse, error)
	grpc.ClientStream
}

type synchronizationServiceDownloadFileClient struct {
	grpc.ClientStream
}

func (x *synchronizationServiceDownloadFileClient) Recv() (*DownloadFileResponse, error) {
	m := new(DownloadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SynchronizationServiceServer is the server API for SynchronizationService service.
// All implementations should embed UnimplementedSynchronizationServiceServer
// for forward compatibility
type SynchronizationServiceServer interface {
	StartSynchronization(context.Context, *StartSynchronizationRequest) (*StartSynchronizationResponse, error)
	FinishSynchronization(context.Context, *FinishSynchronizationRequest) (*FinishSynchronizationResponse, error)
	UploadFile(SynchronizationService_UploadFileServer) error
	DownloadFile(*DownloadFileRequest, SynchronizationService_DownloadFileServer) error
}

// UnimplementedSynchronizationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSynchronizationServiceServer struct {
}

func (UnimplementedSynchronizationServiceServer) StartSynchronization(context.Context, *StartSynchronizationRequest) (*StartSynchronizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSynchronization not implemented")
}
func (UnimplementedSynchronizationServiceServer) FinishSynchronization(context.Context, *FinishSynchronizationRequest) (*FinishSynchronizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishSynchronization not implemented")
}
func (UnimplementedSynchronizationServiceServer) UploadFile(SynchronizationService_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedSynchronizationServiceServer) DownloadFile(*DownloadFileRequest, SynchronizationService_DownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}

// UnsafeSynchronizationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SynchronizationServiceServer will
// result in compilation errors.
type UnsafeSynchronizationServiceServer interface {
	mustEmbedUnimplementedSynchronizationServiceServer()
}

func RegisterSynchronizationServiceServer(s grpc.ServiceRegistrar, srv SynchronizationServiceServer) {
	s.RegisterService(&SynchronizationService_ServiceDesc, srv)
}

func _SynchronizationService_StartSynchronization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSynchronizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynchronizationServiceServer).StartSynchronization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.v1.SynchronizationService/StartSynchronization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynchronizationServiceServer).StartSynchronization(ctx, req.(*StartSynchronizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SynchronizationService_FinishSynchronization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishSynchronizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynchronizationServiceServer).FinishSynchronization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.v1.SynchronizationService/FinishSynchronization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynchronizationServiceServer).FinishSynchronization(ctx, req.(*FinishSynchronizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SynchronizationService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SynchronizationServiceServer).UploadFile(&synchronizationServiceUploadFileServer{stream})
}

type SynchronizationService_UploadFileServer interface {
	SendAndClose(*UploadFileResponse) error
	Recv() (*UploadFileRequest, error)
	grpc.ServerStream
}

type synchronizationServiceUploadFileServer struct {
	grpc.ServerStream
}

func (x *synchronizationServiceUploadFileServer) SendAndClose(m *UploadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *synchronizationServiceUploadFileServer) Recv() (*UploadFileRequest, error) {
	m := new(UploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SynchronizationService_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SynchronizationServiceServer).DownloadFile(m, &synchronizationServiceDownloadFileServer{stream})
}

type SynchronizationService_DownloadFileServer interface {
	Send(*DownloadFileResponse) error
	grpc.ServerStream
}

type synchronizationServiceDownloadFileServer struct {
	grpc.ServerStream
}

func (x *synchronizationServiceDownloadFileServer) Send(m *DownloadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

// SynchronizationService_ServiceDesc is the grpc.ServiceDesc for SynchronizationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SynchronizationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.v1.SynchronizationService",
	HandlerType: (*SynchronizationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartSynchronization",
			Handler:    _SynchronizationService_StartSynchronization_Handler,
		},
		{
			MethodName: "FinishSynchronization",
			Handler:    _SynchronizationService_FinishSynchronization_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _SynchronizationService_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _SynchronizationService_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/v1/services.proto",
}
